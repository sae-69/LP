def dfs(graph, node, visited):
    if node not in visited:
        print(node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(graph, neighbour, visited)
graph={
   'A' : ['B','C'],
   'B' : ['D','E'],
   'C' : ['F'],
   'D' : ['B'],
   'E' : ['B'],
   'F' : ['C']
}
dfs(graph, 'A',set())









def bfs(graph, start):
    visited, queue=set(), [start]
    while queue:
        vertex=queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(graph[vertex]-visited)
    return visited
graph={
   'A' : set(['B','C']),
   'B' : set(['D','E']),
   'C' : set(['F']),
   'D' : set(['B']),
   'E' : set(['B']),
   'F' : set(['C'])
}
bfs(graph,'A')