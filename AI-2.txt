import heapq

# Goal configuration for reference
goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

# Directions to move: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Manhattan distance heuristic
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_x = (value - 1) // 3
                goal_y = (value - 1) % 3
                distance += abs(i - goal_x) + abs(j - goal_y)
    return distance

# Check if a state is the goal
def is_goal(state):
    return state == goal_state

# Convert state to a hashable form (tuple of tuples)
def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

# Find position of 0
def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate next valid states
def get_neighbors(state):
    neighbors = []
    x, y = find_zero(state)
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# A* algorithm
def a_star(start_state):
    start_tuple = state_to_tuple(start_state)
    heap = [(manhattan_distance(start_state), 0, start_state, [])]  # (f, g, state, path)
    visited = set()

    while heap:
        f, g, current, path = heapq.heappop(heap)

        if state_to_tuple(current) in visited:
            continue

        visited.add(state_to_tuple(current))

        if is_goal(current):
            return path + [current]

        for neighbor in get_neighbors(current):
            if state_to_tuple(neighbor) not in visited:
                new_g = g + 1
                new_f = new_g + manhattan_distance(neighbor)
                heapq.heappush(heap, (new_f, new_g, neighbor, path + [current]))

    return None

# Example Usage
start_state = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

solution = a_star(start_state)

# Print the solution path
if solution:
    print("Solution found in", len(solution) - 1, "moves:")
    for step in solution:
        for row in step:
            print(row)
        print()
else:
    print("No solution found.")