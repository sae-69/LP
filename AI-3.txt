def selection_sort(arr):
    n=len(arr)
    for i in range(n):
        min_ind = i
        for j in range(i+1,n):
            if arr[j] < arr[min_ind]:
                min_ind = j
        arr[i], arr[min_ind] = arr[min_ind], arr[i]
    return arr

arr = [10,14,5,20,6]
sorted_arr = selection_sort(arr)
print("Sorted arr is : " ,sorted_arr)










import heapq

def prim_mst(graph, start):
    visited = set()
    mst=[]
    min_heap = [(0, start, None)]
   
    while min_heap and len(visited) < len(graph):
        weight, u , parent = heapq.heappop(min_heap)
       
        if u in visited:
            continue
        visited.add(u)
       
        if parent is not None:
            mst.append((parent, u, weight))
               
        for neighbour, w in graph[u]:
            if neighbour not in visited:
                heapq.heappush(min_heap,(w, neighbour, u))
    return mst

graph={
    'A': [('B', 2), ('C', 3)],
    'B': [('A', 2), ('D', 1)],
    'C': [('A', 3), ('D', 4)],
    'D': [('B', 1), ('C', 4)]
}
start_node = 'A'

mst_result = prim_mst(graph, start_node)

print("Edges in the minimum spanning tree")
total_cost = 0
for u,v,weight in mst_result:
    print(f"{u} - {v} : {weight}")
    total_cost += weight
print("Total cost of mst is : ", total_cost)